<article class="row">
  <section class="display-question col-md-6">
    <%# display question %>
    <%= render "questions/question_display" %>
    <%# Create A Like  %>
    <div id="likes">
      <%= render "/likes/question_like" %>
    </div>
    <%# Favourite a Question %>
    <div id="favourites">
      <%= render "/favourites/question_favourite" %>
    </div>
    <%# Edit or Destroy a Question %>
    <%= render "questions/edit_or_destroy_question" %>
    <%# VOTE for a QUESTION %>
    <div id="votes">
      <%= render "votes/question_vote" %>
    </div>
  </section>
<!-- CREATE ANSWER FORM -->
  <div id = "answers-form">
    <%= render "/answers/form" %>
  </div>
</article>

<!-- LIST ANSWERS -->
<article class="row">
  <hr>
  <section class="list-answers col-md-6 col-md-offset-3">
    <h1 class = "text-lg-center title"><strong>Answers:</strong></h1>
    <div class="answers-loop">
    <% @question.answers.each do |ans| %>
      <%= render "answers/answer", answer: ans  %>
    <% end %>
    </div>
  </section>
</article>

<%# pass an array of parent resource and child resource to the form for. This is a better approach for creating nested resources. Works with both new and edit situations. So if an answer is not persisted, it will send POST request to question_answer_path and otherwise it will send PATCH request to _question_answer_path(@question, @answer) %>

<%# we could use this form after overiding the URL parameter - the downside is that it won't work for 'edit' situations. Only works in the create action. So it's not reusable if we decide to be able to edit an answer.  %>
<%# form_for @answer, url: question_answers_path(@question) do |f|  %>
<%#  %>
<%# end %>
